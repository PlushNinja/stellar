= bootstrap_form_for [:admin, @product] do |f|
  = tab_set 'product-main', class: 'panel-tabs' do
    = nav_tab 'product-meta', col(Product, :metadata), default: true
    = nav_tab 'product-text', col(Product, :text)
    = nav_tab 'product-pricing', col(Product, :pricing), class: (@product.has_variants? || @product.bundle?) && 'disabled'
    = nav_tab 'product-shipping', col(Product, :shipping), class: @product.has_variants? && 'disabled'
    = nav_tab 'product-variants', col(Product, :variants)

  .panel.panel-default.tabbed-panel
    .panel-body
      .tab-content
        = tab_pane 'product-meta', default: true do
          %fieldset{disabled: locked}
            = f.select :purpose, Product.purpose_options, {}, {class: 'selectize'}
          %fieldset{disabled: locked || @product.variant?}
            = f.select :category_ids, Category.options_for_select(current_group.available_categories) { |c, l| [indent(c.to_s, l), c.id] }, {}, {multiple: true, class: 'selectize'}
            = f.select :tag_ids, current_store.tag_options, {}, {multiple: true, class: 'selectize-label'}
          %fieldset{disabled: locked}
            = f.select :vendor_id, current_store.group_options, {include_blank: true}, {class: 'selectize-label', disabled: third_party?}
            .row
              .col-md-6
                = f.text_field :code, required: true
              .col-md-6
                = f.text_field :customer_code
            .row
              .col-md-6
                = f.text_field :available_at,
                    data: {provide: 'datepicker', 'date-format': 'yyyy-mm-dd', 'date-language': I18n.locale}
              .col-md-6
                = f.text_field :deleted_at,
                    data: {provide: 'datepicker', 'date-format': 'yyyy-mm-dd', 'date-language': I18n.locale}
            ~ f.text_area :memo, rows: 2

        = tab_pane 'product-text' do
          %fieldset{disabled: locked}
            = f.text_field :title, required: true
            = f.text_field :subtitle
            ~ f.text_area :overview
            ~ f.text_area :description, rows: 4

        = tab_pane 'product-pricing' do
          %fieldset{disabled: locked}
            = f.select :tax_category_id, current_store.tax_categories.map { |t| [t.to_s, t.id] }, {}, data: {tax_categories: current_store.tax_categories.map { |t| [t.id, {incl_tax: t.included_in_retail?, rate: t.rate.to_f}] }.to_h}
            - if current_group.cost?
              .row
                .col-md-8
                  = f.text_field :cost_price, append: '€', class: 'text-right'
            .row
              .col-md-8
                = f.text_field :trade_price, append: '€', class: 'text-right', help: t('.trade_price_help')
                = f.hidden_field :trade_price_with_tax
              .col-md-4
                %label.control-label= col(Product, :markup_percent)
                = text_field_tag :markup_percent, number_with_precision(@product.markup_percent, precision: 2), class: 'form-control text-right'
            .row
              .col-md-8
                .form-group
                  %label.control-label= col(Product, :retail_price)
                  .input-group
                    = f.text_field_without_bootstrap :retail_price, class: 'form-control text-right'
                    %span.input-group-addon €
                  .help-block
                    #tax-included.collapse{class: @product.tax_category.included_in_retail? && 'in'}
                      = t('.tax_included_in_retail_html')
                    #tax-excluded.collapse{class: @product.tax_category.included_in_retail? || 'in'}
                      = t('.tax_excluded_in_retail_html')
              .col-md-4
                %label.control-label= col(Product, :margin_percent)
                = text_field_tag :margin_percent, number_with_precision(@product.margin_percent, precision: 2), class: 'form-control text-right'

        = tab_pane 'product-shipping' do
          %fieldset{disabled: locked}
            = f.select :shipping_method_ids, current_store.shipping_method_options, {}, {multiple: true, class: 'selectize', placeholder: t('.all_shipping_methods')}
            = f.text_field :mass, append: 'g', class: 'text-right'
            .form-group
              %label.control-label= col(Product, :dimensions)
              .input-group
                = f.text_field_without_bootstrap :dimension_u, class: 'form-control text-right'
                %span.input-group-addon ⨯
                = f.text_field_without_bootstrap :dimension_v, class: 'form-control text-right'
                %span.input-group-addon ⨯
                = f.text_field_without_bootstrap :dimension_w, class: 'form-control text-right'
                %span.input-group-addon mm
            = f.text_field :lead_time, help: t('.lead_time_help_html')
            = f.text_field :additional_info_prompt, help: t('.additional_info_help_html')
            ~ f.text_area :shipping_notes, rows: 2, help: t('.shipping_notes_help')

        = tab_pane 'product-variants' do
          %fieldset{disabled: locked}
            = f.select :master_product_id, [], {}, {placeholder: t('.assign_master_product'), class: 'selectize-tall selectize-list-group', data: {products: [@product.master_product].compact, selected: [@product.master_product_id].compact}}

      - unless locked
        %fieldset.actions.fixed
          .container
            = f.primary

:coffee
  persist_tabs 'product-main'

  numbro.culture "#{t('culture')}"

  $('#product_trade_price').on 'change', (e) ->
    update_trade_price_with_tax()
    update_markup_margin()
    $('#markup_percent, #margin_percent').effect 'highlight'
  $('#product_retail_price').on 'change', (e) ->
    update_markup_margin()
    $('#markup_percent, #margin_percent').effect 'highlight'

  $('#markup_percent').on 'change', (e) ->
    markup_percent = numbro().unformat $('#markup_percent').val()
    trade_price = numbro().unformat if incl_tax() then $('#product_trade_price_with_tax').val() else $('#product_trade_price').val()
    retail_price = trade_price * (1 + markup_percent/100.0)
    $('#product_retail_price').val numbro(retail_price).format('0.00')
    update_markup_margin()
    $('#product_retail_price, #margin_percent').effect 'highlight'

  $('#margin_percent').on 'change', (e) ->
    margin_percent = numbro().unformat $('#margin_percent').val()
    trade_price = numbro().unformat if incl_tax() then $('#product_trade_price_with_tax').val() else $('#product_trade_price').val()
    retail_price = - trade_price / (margin_percent/100.0 - 1)
    $('#product_retail_price').val numbro(retail_price).format('0.00')
    update_markup_margin()
    $('#product_retail_price, #markup_percent').effect 'highlight'

  $('#product_tax_category_id').betterSelectize
    onChange: (index) ->
      update_markup_margin()
      if incl_tax()
        $('#tax-included').collapse 'show'
        $('#tax-excluded').collapse 'hide'
      else
        $('#tax-included').collapse 'hide'
        $('#tax-excluded').collapse 'show'

  $master_product = $('#product_master_product_id')
  products = $master_product.data 'products'
  selected = $master_product.data 'selected'

  $master_product.betterSelectize
    remove: true
    options: products
    items: selected
    valueField: 'id'
    sortField: [{field: 'title'}, {field: 'subtitle'}]
    searchField: ['code', 'customer_code', 'title', 'subtitle']
    diacritics: false
    render: $.fn.selectize.product_renderer
    load: (query, callback) ->
      return callback() unless query.length > 2
      $.ajax
        url: '#{query_admin_products_path}'
        type: 'GET'
        dataType: 'json'
        data:
          q: query
          exclusions: #{@product.new_record? ? [] : @product.id}
        error: ->
          callback()
        success: (response) ->
          callback(response)

  $('select.selectize-label').betterSelectize
    labelField: 'title'
    dataAttr: 'data'
    render: $.fn.selectize.label_renderer

  CKEDITOR.ClassicEditor.create(
    $('#product_overview')[0]
    toolbar: ['heading', 'bold', 'italic', 'numberedList', 'bulletedList', 'link', 'undo', 'redo']
    language: '#{I18n.locale}'
  ).then (editor) -> editor.isReadOnly = #{locked}
  .catch (error) -> console.log error
