.table-responsive
  %table.table.table-hover
    %thead
      %tr
        %th.col-min.hidden-print
        %th= col(Product, :title)
        %th.col-xs-1= col(Product, :price)
        %th.col-xs-1.text-right= col(ComponentEntry, :quantity)
        %th.col-xs-1= col(ComponentEntry, :subtotal)
        %th.actions

    %tbody#component-entries-tbody.sortable
      = render partial: 'admin/component_entries/edit_tbody', object: product, as: :product

.table-responsive
  = form_for [:admin, product, product.component_entries.build(quantity: 1)], remote: true do |f|
    %table.table
      %tfoot
        %tr
          %td.col-xs-10
            = f.select :component_id, [], {}, {placeholder: t('actions.query'), class: 'selectize-tall selectize-list-group'}
          %td.col-xs-1= f.number_field :quantity, min: 1, class: 'form-control text-right'
          %td.actions
            = f.button id: 'create_component_entry', class: 'btn btn-default' do
              = icon('check')

:coffee
  $('#component-entries-tbody').sortable(
    items: '> tr'
    handle: '.handle'
    placeholder: 'sortable-placeholder'
    opacity: 0.5
    revert: 200
  ).bind 'sortupdate', (e, ui) ->
    $.post '#{reorder_admin_product_component_entries_path(@product)}',
      {reorder: $(this).sortable('toArray')}

  $('#component_entry_component_id').betterSelectize
    plugins: ['remove_button']
    valueField: 'id'
    sortField: [{field: 'title'}, {field: 'subtitle'}]
    searchField: ['code', 'customer_code', 'title', 'subtitle']
    diacritics: false
    render: $.fn.selectize.product_renderer
    load: (query, callback) ->
      return callback() unless query.length > 2
      $.ajax
        url: '#{query_admin_products_path}'
        type: 'GET'
        dataType: 'json'
        data:
          q: query
          purposes: ['vanilla', 'virtual', 'component']
          exclusions: #{product.id}
        error: ->
          callback()
        success: (response) ->
          callback(response)
