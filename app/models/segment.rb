#encoding: utf-8

class Segment < ActiveRecord::Base

  store :metadata, accessors: [
    :url,
    :min_height, :grid_columns, :masonry,
    :max_items, :show_more, :product_scope,
    :map_location, :map_zoom
  ], coder: JSON

  resourcify
  include Authority::Abilities
  include Imageable
  include Reorderable

  #---
  ALIGNMENTS = %w{align-top align-middle align-bottom}.freeze

  GRID_COLUMNS = %w{1 2 3 4 6 12}

  #---
  enum template: {
    empty: 0,
    column: 1,
    picture: 2,
    gallery: 3,
    map: 4,
    video_player: 5,
    category: 11,
    product: 12,
    promotion: 13,
    department: 14,
    category_feature: 21,
    product_feature: 22,
    promotion_feature: 23,
    department_feature: 24,
    raw: 99,
  }

  #---
  belongs_to :section, touch: true
  delegate :shape, to: :section
  belongs_to :resource, polymorphic: true

  after_save :schedule_content_update, if: -> (segment) { segment.body_changed? }

  default_scope {
    joins(:section)
    .order('sections.priority, segments.priority')
  }
  scope :with_content, -> { where(template: [1, 99]) }


  #---
  def self.template_options
    Segment.templates.keys.map { |t| [Segment.human_attribute_value(:template, t), t] }
  end

  def self.alignment_options
    ALIGNMENTS.map { |a| [Segment.human_attribute_value(:alignment, a), a] }
  end

  def self.grid_columns_options
    GRID_COLUMNS
  end

  #---
  def has_content?
    column? || raw?
  end

  def edit_in_place?
    column?
  end

  def grid_columns
    super.presence || '3'
  end

  def image_options
    {purpose: false}
  end

  # Segments that need a foreground image will favour vector imagery
  # and default to the last available image of any type.
  def foreground_image
    images.vector.any? ? images.vector.first : images.last
  end

  # Trades places with the given other segment by updating
  # section ids and priorities for both.
  def switch(other)
    transaction do
      other_section = other.section
      other_priority = other.priority
      other.update section: section, priority: priority
      update section: other_section, priority: other_priority
    end
  end

  # Defines accessors to boolean settings not generated by Rails.
  %w[masonry show_more].each do |method|
    alias_method "#{method}?", method
    define_method("#{method}=") do |value|
      super(['1', 1, true].include?(value))
    end
  end

  def to_s
    human_attribute_value(:template).capitalize
  end

  def to_partial_path
    "segments/templates/#{template}"
  end

  private
    def schedule_content_update
      ContentGenerationJob.perform_later(self)
      true
    end
end
